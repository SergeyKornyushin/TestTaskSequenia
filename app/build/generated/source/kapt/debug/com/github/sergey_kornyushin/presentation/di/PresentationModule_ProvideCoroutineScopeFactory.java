// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.presentation.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import kotlinx.coroutines.CoroutineScope;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PresentationModule_ProvideCoroutineScopeFactory implements Factory<CoroutineScope> {
  @Override
  public CoroutineScope get() {
    return provideCoroutineScope();
  }

  public static PresentationModule_ProvideCoroutineScopeFactory create() {
    return InstanceHolder.INSTANCE;
  }

  public static CoroutineScope provideCoroutineScope() {
    return Preconditions.checkNotNullFromProvides(PresentationModule.INSTANCE.provideCoroutineScope());
  }

  private static final class InstanceHolder {
    private static final PresentationModule_ProvideCoroutineScopeFactory INSTANCE = new PresentationModule_ProvideCoroutineScopeFactory();
  }
}
