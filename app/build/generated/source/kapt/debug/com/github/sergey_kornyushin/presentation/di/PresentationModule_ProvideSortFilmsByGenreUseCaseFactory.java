// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.presentation.di;

import com.github.sergey_kornyushin.domain.repository.SortRepository;
import com.github.sergey_kornyushin.domain.use_cases.SortFilmsByGenreUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PresentationModule_ProvideSortFilmsByGenreUseCaseFactory implements Factory<SortFilmsByGenreUseCase> {
  private final Provider<SortRepository> sortRepositoryProvider;

  public PresentationModule_ProvideSortFilmsByGenreUseCaseFactory(
      Provider<SortRepository> sortRepositoryProvider) {
    this.sortRepositoryProvider = sortRepositoryProvider;
  }

  @Override
  public SortFilmsByGenreUseCase get() {
    return provideSortFilmsByGenreUseCase(sortRepositoryProvider.get());
  }

  public static PresentationModule_ProvideSortFilmsByGenreUseCaseFactory create(
      Provider<SortRepository> sortRepositoryProvider) {
    return new PresentationModule_ProvideSortFilmsByGenreUseCaseFactory(sortRepositoryProvider);
  }

  public static SortFilmsByGenreUseCase provideSortFilmsByGenreUseCase(
      SortRepository sortRepository) {
    return Preconditions.checkNotNullFromProvides(PresentationModule.INSTANCE.provideSortFilmsByGenreUseCase(sortRepository));
  }
}
