// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.data.di;

import com.github.sergey_kornyushin.common.ResourceProvider;
import com.github.sergey_kornyushin.data.database.dao.FilmsDao;
import com.github.sergey_kornyushin.data.repository.mappers.DomainSingleFilmMapper;
import com.github.sergey_kornyushin.domain.repository.SelectedFilmRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DomainModule_ProvideSelectedFilmRepositoryFactory implements Factory<SelectedFilmRepository> {
  private final Provider<FilmsDao> filmsDaoProvider;

  private final Provider<DomainSingleFilmMapper.Base> domainSingleFilmMapperProvider;

  private final Provider<ResourceProvider> resourceProvider;

  public DomainModule_ProvideSelectedFilmRepositoryFactory(Provider<FilmsDao> filmsDaoProvider,
      Provider<DomainSingleFilmMapper.Base> domainSingleFilmMapperProvider,
      Provider<ResourceProvider> resourceProvider) {
    this.filmsDaoProvider = filmsDaoProvider;
    this.domainSingleFilmMapperProvider = domainSingleFilmMapperProvider;
    this.resourceProvider = resourceProvider;
  }

  @Override
  public SelectedFilmRepository get() {
    return provideSelectedFilmRepository(filmsDaoProvider.get(), domainSingleFilmMapperProvider.get(), resourceProvider.get());
  }

  public static DomainModule_ProvideSelectedFilmRepositoryFactory create(
      Provider<FilmsDao> filmsDaoProvider,
      Provider<DomainSingleFilmMapper.Base> domainSingleFilmMapperProvider,
      Provider<ResourceProvider> resourceProvider) {
    return new DomainModule_ProvideSelectedFilmRepositoryFactory(filmsDaoProvider, domainSingleFilmMapperProvider, resourceProvider);
  }

  public static SelectedFilmRepository provideSelectedFilmRepository(FilmsDao filmsDao,
      DomainSingleFilmMapper.Base domainSingleFilmMapper, ResourceProvider resourceProvider) {
    return Preconditions.checkNotNullFromProvides(DomainModule.INSTANCE.provideSelectedFilmRepository(filmsDao, domainSingleFilmMapper, resourceProvider));
  }
}
