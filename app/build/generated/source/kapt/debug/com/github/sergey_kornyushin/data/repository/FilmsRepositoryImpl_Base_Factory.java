// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.data.repository;

import com.github.sergey_kornyushin.common.ResourceProvider;
import com.github.sergey_kornyushin.data.database.dao.FilmsDao;
import com.github.sergey_kornyushin.data.database.mappers.MappersSet;
import com.github.sergey_kornyushin.data.remote.FilmsApi;
import com.github.sergey_kornyushin.data.repository.mappers.DomainListFiller;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FilmsRepositoryImpl_Base_Factory implements Factory<FilmsRepositoryImpl.Base> {
  private final Provider<FilmsDao> filmsDaoProvider;

  private final Provider<FilmsApi> apiProvider;

  private final Provider<MappersSet.Base> mappersProvider;

  private final Provider<DomainListFiller> listFillerProvider;

  private final Provider<ResourceProvider> resourceProvider;

  public FilmsRepositoryImpl_Base_Factory(Provider<FilmsDao> filmsDaoProvider,
      Provider<FilmsApi> apiProvider, Provider<MappersSet.Base> mappersProvider,
      Provider<DomainListFiller> listFillerProvider, Provider<ResourceProvider> resourceProvider) {
    this.filmsDaoProvider = filmsDaoProvider;
    this.apiProvider = apiProvider;
    this.mappersProvider = mappersProvider;
    this.listFillerProvider = listFillerProvider;
    this.resourceProvider = resourceProvider;
  }

  @Override
  public FilmsRepositoryImpl.Base get() {
    return newInstance(filmsDaoProvider.get(), apiProvider.get(), mappersProvider.get(), listFillerProvider.get(), resourceProvider.get());
  }

  public static FilmsRepositoryImpl_Base_Factory create(Provider<FilmsDao> filmsDaoProvider,
      Provider<FilmsApi> apiProvider, Provider<MappersSet.Base> mappersProvider,
      Provider<DomainListFiller> listFillerProvider, Provider<ResourceProvider> resourceProvider) {
    return new FilmsRepositoryImpl_Base_Factory(filmsDaoProvider, apiProvider, mappersProvider, listFillerProvider, resourceProvider);
  }

  public static FilmsRepositoryImpl.Base newInstance(FilmsDao filmsDao, FilmsApi api,
      MappersSet.Base mappers, DomainListFiller listFiller, ResourceProvider resourceProvider) {
    return new FilmsRepositoryImpl.Base(filmsDao, api, mappers, listFiller, resourceProvider);
  }
}
