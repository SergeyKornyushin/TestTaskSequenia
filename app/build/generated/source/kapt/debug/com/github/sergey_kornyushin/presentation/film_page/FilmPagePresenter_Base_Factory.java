// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.presentation.film_page;

import com.github.sergey_kornyushin.common.ResourceProvider;
import com.github.sergey_kornyushin.domain.use_cases.GetSelectedFilmUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FilmPagePresenter_Base_Factory implements Factory<FilmPagePresenter.Base> {
  private final Provider<GetSelectedFilmUseCase> getSelectedFilmUseCaseProvider;

  private final Provider<ResourceProvider> resourceProvider;

  private final Provider<CoroutineScope> coroutineScopeProvider;

  public FilmPagePresenter_Base_Factory(
      Provider<GetSelectedFilmUseCase> getSelectedFilmUseCaseProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<CoroutineScope> coroutineScopeProvider) {
    this.getSelectedFilmUseCaseProvider = getSelectedFilmUseCaseProvider;
    this.resourceProvider = resourceProvider;
    this.coroutineScopeProvider = coroutineScopeProvider;
  }

  @Override
  public FilmPagePresenter.Base get() {
    return newInstance(getSelectedFilmUseCaseProvider.get(), resourceProvider.get(), coroutineScopeProvider.get());
  }

  public static FilmPagePresenter_Base_Factory create(
      Provider<GetSelectedFilmUseCase> getSelectedFilmUseCaseProvider,
      Provider<ResourceProvider> resourceProvider,
      Provider<CoroutineScope> coroutineScopeProvider) {
    return new FilmPagePresenter_Base_Factory(getSelectedFilmUseCaseProvider, resourceProvider, coroutineScopeProvider);
  }

  public static FilmPagePresenter.Base newInstance(GetSelectedFilmUseCase getSelectedFilmUseCase,
      ResourceProvider resourceProvider, CoroutineScope coroutineScope) {
    return new FilmPagePresenter.Base(getSelectedFilmUseCase, resourceProvider, coroutineScope);
  }
}
