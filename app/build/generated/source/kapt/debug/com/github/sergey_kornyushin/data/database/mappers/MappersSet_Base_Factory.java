// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.data.database.mappers;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MappersSet_Base_Factory implements Factory<MappersSet.Base> {
  private final Provider<FilmsToDbMapper> filmsToDbMapperProvider;

  private final Provider<GenresToDbMapper> genresToDbMapperProvider;

  private final Provider<FilmsGenresCrossRefMapper> filmsGenresCrossRefMapperProvider;

  public MappersSet_Base_Factory(Provider<FilmsToDbMapper> filmsToDbMapperProvider,
      Provider<GenresToDbMapper> genresToDbMapperProvider,
      Provider<FilmsGenresCrossRefMapper> filmsGenresCrossRefMapperProvider) {
    this.filmsToDbMapperProvider = filmsToDbMapperProvider;
    this.genresToDbMapperProvider = genresToDbMapperProvider;
    this.filmsGenresCrossRefMapperProvider = filmsGenresCrossRefMapperProvider;
  }

  @Override
  public MappersSet.Base get() {
    return newInstance(filmsToDbMapperProvider.get(), genresToDbMapperProvider.get(), filmsGenresCrossRefMapperProvider.get());
  }

  public static MappersSet_Base_Factory create(Provider<FilmsToDbMapper> filmsToDbMapperProvider,
      Provider<GenresToDbMapper> genresToDbMapperProvider,
      Provider<FilmsGenresCrossRefMapper> filmsGenresCrossRefMapperProvider) {
    return new MappersSet_Base_Factory(filmsToDbMapperProvider, genresToDbMapperProvider, filmsGenresCrossRefMapperProvider);
  }

  public static MappersSet.Base newInstance(FilmsToDbMapper filmsToDbMapper,
      GenresToDbMapper genresToDbMapper, FilmsGenresCrossRefMapper filmsGenresCrossRefMapper) {
    return new MappersSet.Base(filmsToDbMapper, genresToDbMapper, filmsGenresCrossRefMapper);
  }
}
