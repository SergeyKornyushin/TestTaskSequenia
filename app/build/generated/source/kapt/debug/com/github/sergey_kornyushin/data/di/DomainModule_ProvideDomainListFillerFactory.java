// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.data.di;

import com.github.sergey_kornyushin.common.ResourceProvider;
import com.github.sergey_kornyushin.data.repository.mappers.DomainListFiller;
import com.github.sergey_kornyushin.data.repository.mappers.DomainRecyclerViewMapper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DomainModule_ProvideDomainListFillerFactory implements Factory<DomainListFiller> {
  private final Provider<DomainRecyclerViewMapper.Base> domainResourceMapperProvider;

  private final Provider<ResourceProvider> resourceProvider;

  public DomainModule_ProvideDomainListFillerFactory(
      Provider<DomainRecyclerViewMapper.Base> domainResourceMapperProvider,
      Provider<ResourceProvider> resourceProvider) {
    this.domainResourceMapperProvider = domainResourceMapperProvider;
    this.resourceProvider = resourceProvider;
  }

  @Override
  public DomainListFiller get() {
    return provideDomainListFiller(domainResourceMapperProvider.get(), resourceProvider.get());
  }

  public static DomainModule_ProvideDomainListFillerFactory create(
      Provider<DomainRecyclerViewMapper.Base> domainResourceMapperProvider,
      Provider<ResourceProvider> resourceProvider) {
    return new DomainModule_ProvideDomainListFillerFactory(domainResourceMapperProvider, resourceProvider);
  }

  public static DomainListFiller provideDomainListFiller(
      DomainRecyclerViewMapper.Base domainResourceMapper, ResourceProvider resourceProvider) {
    return Preconditions.checkNotNullFromProvides(DomainModule.INSTANCE.provideDomainListFiller(domainResourceMapper, resourceProvider));
  }
}
