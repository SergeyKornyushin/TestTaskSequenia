// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.presentation.di;

import com.github.sergey_kornyushin.domain.repository.FilmsRepository;
import com.github.sergey_kornyushin.domain.use_cases.GetFilmsUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PresentationModule_ProvideGetFilmsUseCaseFactory implements Factory<GetFilmsUseCase> {
  private final Provider<FilmsRepository> filmsRepositoryProvider;

  public PresentationModule_ProvideGetFilmsUseCaseFactory(
      Provider<FilmsRepository> filmsRepositoryProvider) {
    this.filmsRepositoryProvider = filmsRepositoryProvider;
  }

  @Override
  public GetFilmsUseCase get() {
    return provideGetFilmsUseCase(filmsRepositoryProvider.get());
  }

  public static PresentationModule_ProvideGetFilmsUseCaseFactory create(
      Provider<FilmsRepository> filmsRepositoryProvider) {
    return new PresentationModule_ProvideGetFilmsUseCaseFactory(filmsRepositoryProvider);
  }

  public static GetFilmsUseCase provideGetFilmsUseCase(FilmsRepository filmsRepository) {
    return Preconditions.checkNotNullFromProvides(PresentationModule.INSTANCE.provideGetFilmsUseCase(filmsRepository));
  }
}
