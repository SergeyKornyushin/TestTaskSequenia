// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.presentation.di;

import com.github.sergey_kornyushin.domain.repository.SelectedFilmRepository;
import com.github.sergey_kornyushin.domain.use_cases.GetSelectedFilmUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PresentationModule_ProvideGetSelectedFilmUseCaseFactory implements Factory<GetSelectedFilmUseCase> {
  private final Provider<SelectedFilmRepository> selectedFilmRepositoryProvider;

  public PresentationModule_ProvideGetSelectedFilmUseCaseFactory(
      Provider<SelectedFilmRepository> selectedFilmRepositoryProvider) {
    this.selectedFilmRepositoryProvider = selectedFilmRepositoryProvider;
  }

  @Override
  public GetSelectedFilmUseCase get() {
    return provideGetSelectedFilmUseCase(selectedFilmRepositoryProvider.get());
  }

  public static PresentationModule_ProvideGetSelectedFilmUseCaseFactory create(
      Provider<SelectedFilmRepository> selectedFilmRepositoryProvider) {
    return new PresentationModule_ProvideGetSelectedFilmUseCaseFactory(selectedFilmRepositoryProvider);
  }

  public static GetSelectedFilmUseCase provideGetSelectedFilmUseCase(
      SelectedFilmRepository selectedFilmRepository) {
    return Preconditions.checkNotNullFromProvides(PresentationModule.INSTANCE.provideGetSelectedFilmUseCase(selectedFilmRepository));
  }
}
