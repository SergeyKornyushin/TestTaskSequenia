// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.presentation.films_list;

import com.github.sergey_kornyushin.common.ResourceProvider;
import com.github.sergey_kornyushin.domain.use_cases.GetFilmsUseCase;
import com.github.sergey_kornyushin.domain.use_cases.SortFilmsByGenreUseCase;
import com.github.sergey_kornyushin.presentation.mappers.PresenterMapper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FilmsListPresenter_Base_Factory implements Factory<FilmsListPresenter.Base> {
  private final Provider<GetFilmsUseCase> getFilmsUseCaseProvider;

  private final Provider<SortFilmsByGenreUseCase> getSortUseCaseProvider;

  private final Provider<PresenterMapper> presenterMapperProvider;

  private final Provider<ResourceProvider> resourceProvider;

  private final Provider<CoroutineScope> coroutineScopeProvider;

  private final Provider<CacheGenreItem> cacheGenreItemProvider;

  public FilmsListPresenter_Base_Factory(Provider<GetFilmsUseCase> getFilmsUseCaseProvider,
      Provider<SortFilmsByGenreUseCase> getSortUseCaseProvider,
      Provider<PresenterMapper> presenterMapperProvider,
      Provider<ResourceProvider> resourceProvider, Provider<CoroutineScope> coroutineScopeProvider,
      Provider<CacheGenreItem> cacheGenreItemProvider) {
    this.getFilmsUseCaseProvider = getFilmsUseCaseProvider;
    this.getSortUseCaseProvider = getSortUseCaseProvider;
    this.presenterMapperProvider = presenterMapperProvider;
    this.resourceProvider = resourceProvider;
    this.coroutineScopeProvider = coroutineScopeProvider;
    this.cacheGenreItemProvider = cacheGenreItemProvider;
  }

  @Override
  public FilmsListPresenter.Base get() {
    return newInstance(getFilmsUseCaseProvider.get(), getSortUseCaseProvider.get(), presenterMapperProvider.get(), resourceProvider.get(), coroutineScopeProvider.get(), cacheGenreItemProvider.get());
  }

  public static FilmsListPresenter_Base_Factory create(
      Provider<GetFilmsUseCase> getFilmsUseCaseProvider,
      Provider<SortFilmsByGenreUseCase> getSortUseCaseProvider,
      Provider<PresenterMapper> presenterMapperProvider,
      Provider<ResourceProvider> resourceProvider, Provider<CoroutineScope> coroutineScopeProvider,
      Provider<CacheGenreItem> cacheGenreItemProvider) {
    return new FilmsListPresenter_Base_Factory(getFilmsUseCaseProvider, getSortUseCaseProvider, presenterMapperProvider, resourceProvider, coroutineScopeProvider, cacheGenreItemProvider);
  }

  public static FilmsListPresenter.Base newInstance(GetFilmsUseCase getFilmsUseCase,
      SortFilmsByGenreUseCase getSortUseCase, PresenterMapper presenterMapper,
      ResourceProvider resourceProvider, CoroutineScope coroutineScope,
      CacheGenreItem cacheGenreItem) {
    return new FilmsListPresenter.Base(getFilmsUseCase, getSortUseCase, presenterMapper, resourceProvider, coroutineScope, cacheGenreItem);
  }
}
