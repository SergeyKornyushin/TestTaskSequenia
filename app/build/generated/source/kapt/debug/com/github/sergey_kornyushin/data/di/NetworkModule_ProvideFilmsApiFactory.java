// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.data.di;

import com.github.sergey_kornyushin.data.remote.FilmsApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideFilmsApiFactory implements Factory<FilmsApi> {
  @Override
  public FilmsApi get() {
    return provideFilmsApi();
  }

  public static NetworkModule_ProvideFilmsApiFactory create() {
    return InstanceHolder.INSTANCE;
  }

  public static FilmsApi provideFilmsApi() {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideFilmsApi());
  }

  private static final class InstanceHolder {
    private static final NetworkModule_ProvideFilmsApiFactory INSTANCE = new NetworkModule_ProvideFilmsApiFactory();
  }
}
