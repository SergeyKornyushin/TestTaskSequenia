// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.domain.use_cases;

import com.github.sergey_kornyushin.domain.repository.FilmsRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetFilmsUseCase_Base_Factory implements Factory<GetFilmsUseCase.Base> {
  private final Provider<FilmsRepository> filmsRepositoryProvider;

  public GetFilmsUseCase_Base_Factory(Provider<FilmsRepository> filmsRepositoryProvider) {
    this.filmsRepositoryProvider = filmsRepositoryProvider;
  }

  @Override
  public GetFilmsUseCase.Base get() {
    return newInstance(filmsRepositoryProvider.get());
  }

  public static GetFilmsUseCase_Base_Factory create(
      Provider<FilmsRepository> filmsRepositoryProvider) {
    return new GetFilmsUseCase_Base_Factory(filmsRepositoryProvider);
  }

  public static GetFilmsUseCase.Base newInstance(FilmsRepository filmsRepository) {
    return new GetFilmsUseCase.Base(filmsRepository);
  }
}
