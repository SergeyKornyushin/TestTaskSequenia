// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.data.di;

import com.github.sergey_kornyushin.common.ResourceProvider;
import com.github.sergey_kornyushin.data.database.dao.FilmsDao;
import com.github.sergey_kornyushin.data.database.mappers.MappersSet;
import com.github.sergey_kornyushin.data.remote.FilmsApi;
import com.github.sergey_kornyushin.data.repository.mappers.DomainListFiller;
import com.github.sergey_kornyushin.domain.repository.SortRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DomainModule_ProvideSortRepositoryFactory implements Factory<SortRepository> {
  private final Provider<FilmsDao> filmsDaoProvider;

  private final Provider<FilmsApi> filmsApiProvider;

  private final Provider<MappersSet.Base> mappersSetProvider;

  private final Provider<DomainListFiller> listFillerProvider;

  private final Provider<ResourceProvider> resourceProvider;

  public DomainModule_ProvideSortRepositoryFactory(Provider<FilmsDao> filmsDaoProvider,
      Provider<FilmsApi> filmsApiProvider, Provider<MappersSet.Base> mappersSetProvider,
      Provider<DomainListFiller> listFillerProvider, Provider<ResourceProvider> resourceProvider) {
    this.filmsDaoProvider = filmsDaoProvider;
    this.filmsApiProvider = filmsApiProvider;
    this.mappersSetProvider = mappersSetProvider;
    this.listFillerProvider = listFillerProvider;
    this.resourceProvider = resourceProvider;
  }

  @Override
  public SortRepository get() {
    return provideSortRepository(filmsDaoProvider.get(), filmsApiProvider.get(), mappersSetProvider.get(), listFillerProvider.get(), resourceProvider.get());
  }

  public static DomainModule_ProvideSortRepositoryFactory create(
      Provider<FilmsDao> filmsDaoProvider, Provider<FilmsApi> filmsApiProvider,
      Provider<MappersSet.Base> mappersSetProvider, Provider<DomainListFiller> listFillerProvider,
      Provider<ResourceProvider> resourceProvider) {
    return new DomainModule_ProvideSortRepositoryFactory(filmsDaoProvider, filmsApiProvider, mappersSetProvider, listFillerProvider, resourceProvider);
  }

  public static SortRepository provideSortRepository(FilmsDao filmsDao, FilmsApi filmsApi,
      MappersSet.Base mappersSet, DomainListFiller listFiller, ResourceProvider resourceProvider) {
    return Preconditions.checkNotNullFromProvides(DomainModule.INSTANCE.provideSortRepository(filmsDao, filmsApi, mappersSet, listFiller, resourceProvider));
  }
}
