// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.data.repository;

import com.github.sergey_kornyushin.common.ResourceProvider;
import com.github.sergey_kornyushin.data.database.dao.FilmsDao;
import com.github.sergey_kornyushin.data.repository.mappers.DomainSingleFilmMapper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FilmPageRepositoryImpl_Base_Factory implements Factory<FilmPageRepositoryImpl.Base> {
  private final Provider<FilmsDao> filmsDaoProvider;

  private final Provider<DomainSingleFilmMapper> singleFilmMapperProvider;

  private final Provider<ResourceProvider> resourceProvider;

  public FilmPageRepositoryImpl_Base_Factory(Provider<FilmsDao> filmsDaoProvider,
      Provider<DomainSingleFilmMapper> singleFilmMapperProvider,
      Provider<ResourceProvider> resourceProvider) {
    this.filmsDaoProvider = filmsDaoProvider;
    this.singleFilmMapperProvider = singleFilmMapperProvider;
    this.resourceProvider = resourceProvider;
  }

  @Override
  public FilmPageRepositoryImpl.Base get() {
    return newInstance(filmsDaoProvider.get(), singleFilmMapperProvider.get(), resourceProvider.get());
  }

  public static FilmPageRepositoryImpl_Base_Factory create(Provider<FilmsDao> filmsDaoProvider,
      Provider<DomainSingleFilmMapper> singleFilmMapperProvider,
      Provider<ResourceProvider> resourceProvider) {
    return new FilmPageRepositoryImpl_Base_Factory(filmsDaoProvider, singleFilmMapperProvider, resourceProvider);
  }

  public static FilmPageRepositoryImpl.Base newInstance(FilmsDao filmsDao,
      DomainSingleFilmMapper singleFilmMapper, ResourceProvider resourceProvider) {
    return new FilmPageRepositoryImpl.Base(filmsDao, singleFilmMapper, resourceProvider);
  }
}
