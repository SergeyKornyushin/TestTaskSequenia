// Generated by Dagger (https://dagger.dev).
package com.github.sergey_kornyushin.data.di;

import com.github.sergey_kornyushin.data.database.FilmsDataBase;
import com.github.sergey_kornyushin.data.database.dao.FilmsDao;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class StorageModule_ProvideFilmsDaoFactory implements Factory<FilmsDao> {
  private final Provider<FilmsDataBase> filmsDataBaseProvider;

  public StorageModule_ProvideFilmsDaoFactory(Provider<FilmsDataBase> filmsDataBaseProvider) {
    this.filmsDataBaseProvider = filmsDataBaseProvider;
  }

  @Override
  public FilmsDao get() {
    return provideFilmsDao(filmsDataBaseProvider.get());
  }

  public static StorageModule_ProvideFilmsDaoFactory create(
      Provider<FilmsDataBase> filmsDataBaseProvider) {
    return new StorageModule_ProvideFilmsDaoFactory(filmsDataBaseProvider);
  }

  public static FilmsDao provideFilmsDao(FilmsDataBase filmsDataBase) {
    return Preconditions.checkNotNullFromProvides(StorageModule.INSTANCE.provideFilmsDao(filmsDataBase));
  }
}
